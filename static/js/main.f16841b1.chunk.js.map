{"version":3,"sources":["components/SearchBar.jsx","components/withCovidData.jsx","components/CovidTable.jsx","App.jsx","serviceWorker.js","index.js"],"names":["withStyles","form","background","width","position","top","left","padding","field","backgroundColor","value","onChange","classes","onSubmit","className","TextField","label","variant","withCovidData","WrappedComponent","state","data","isLoading","hasError","this","setState","fetch","then","res","json","Countries","catch","props","React","Component","CovidTableRow","Country","NewConfirmed","NewDeaths","NewRecovered","TotalConfirmed","TotalDeaths","TotalRecovered","TableRow","TableCell","fontWeight","Typography","align","tableContainer","marginTop","tableHeader","TableContainer","component","Paper","Table","TableHead","TableBody","map","country","key","App","handleChange","target","toLowerCase","filteredData","filter","includes","container","CircularProgress","spinner","maxWidth","overflow","margin","WithCovidData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.f16841b1.chunk.js","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/FormControl';\nimport { withStyles } from '@material-ui/core';\n\nconst styles = {\n  form: {\n    background: '#fff',\n    width: '100%',\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    padding: '10px 20px',\n  },\n  field: {\n    width: 'calc(100% - 40px)',\n    backgroundColor: '#fff',\n  }\n}\n\nfunction SearchBar({ value, onChange, onSubmit, classes }) {\n  return (\n  <Grid className={classes.form}>\n    <TextField\n      label=\"Find Country\"\n      className={classes.field}\n      value={value}\n      onChange={onChange}\n      variant=\"outlined\"\n    />\n  </Grid>\n  )\n}\n\n\n\nexport default withStyles(styles)(SearchBar);\n","import React from 'react';\n\nconst withCovidData = (WrappedComponent) => class extends React.Component {\n  state = {\n    data: [],\n    isLoading: true,\n    hasError: false,\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoading: true,\n    });\n\n    fetch('https://api.covid19api.com/summary')\n      .then((res) => res.json())\n      .then((data) => this.setState({\n        data: data.Countries,\n        isLoading: false,\n      }))\n      .catch(() => this.setState({\n        hasError: true,\n        isLoading: false,\n      }))\n  }\n\n  render() {\n    const { isLoading, data } = this.state;\n\n    return <WrappedComponent {...this.props} data={data} isLoading={isLoading} />\n  }\n}\n\nexport default withCovidData;\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core';\n\nconst styles = {\n  tableContainer: {\n    marginTop: 100,\n  },\n  tableHeader: {\n    fontWeight: 'bold !important'\n  }\n}\n\nfunction CovidTableRow({\n  Country,\n  NewConfirmed,\n  NewDeaths,\n  NewRecovered,\n  TotalConfirmed,\n  TotalDeaths,\n  TotalRecovered\n}) {\n  return (\n    <TableRow>\n      <TableCell fontWeight={500}><Typography fontWeight={600}>{Country}</Typography></TableCell>\n      <TableCell align=\"right\">{NewConfirmed}</TableCell>\n      <TableCell align=\"right\">{NewDeaths}</TableCell>\n      <TableCell align=\"right\">{NewRecovered}</TableCell>\n      <TableCell align=\"right\">{TotalConfirmed}</TableCell>\n      <TableCell align=\"right\">{TotalDeaths}</TableCell>\n      <TableCell align=\"right\">{TotalRecovered}</TableCell>\n    </TableRow>\n  )\n}\n\nfunction CovidTable({ data, classes }) {\n  return (\n    <TableContainer className={classes.tableContainer} component={Paper}>\n      <Table>\n        <TableHead>\n            <TableRow className={classes.tableHeader}>\n              <TableCell>Country</TableCell>\n              <TableCell align=\"right\">New Confirmed</TableCell>\n              <TableCell align=\"right\">New Deaths</TableCell>\n              <TableCell align=\"right\">New Recovered</TableCell>\n              <TableCell align=\"right\">Total Confirmed</TableCell>\n              <TableCell align=\"right\">Total Deaths</TableCell>\n              <TableCell align=\"right\">Total Recovered</TableCell>\n            </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.map((country) => <CovidTableRow key={country.Country} {...country} />)}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default withStyles(styles)(CovidTable);","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport SearchBar from './components/SearchBar';\nimport WithCovidData from './components/withCovidData';\nimport CovidTable from './components/CovidTable';\n\nimport { withStyles } from '@material-ui/core';\n\nconst styles = {\n  container: {\n    maxWidth: 'calc(100% - 40px)',\n    overflow: 'hidden',\n    padding: '0 20px',\n  },\n  spinner: {\n    margin: '200px 50%'\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      country: '',\n      filteredData: []\n    }\n  }\n\n  handleChange = ({ target }) => {\n    const value = target.value.toLowerCase();\n\n    this.setState({\n      country: value,\n      filteredData: this.props.data.filter(({ Country }) => Country.toLowerCase().includes(value))\n    })\n  }\n\n  render() {\n    const { country, filteredData } = this.state;\n    const { isLoading, data, classes } = this.props;\n\n    return (\n      <div className={classes.container}>\n        <SearchBar onChange={this.handleChange} value={country} />\n        {isLoading ? <CircularProgress className={classes.spinner} /> : <CovidTable data={country !== '' ? filteredData : data} />}\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(WithCovidData(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}